@using MyTestApplication.Models

@model IEnumerable<tbl_Order>

<div id="descContainer">Sort and filter data, group, reorder and resize columns, change page numbers and page size. Once you are done, <a onclick="window.location.reload()">refresh</a> the web page to see that the grid’s state is automatically persisted to continue working from where you stopped.</div>

@(Html.DevExtreme().DataGrid<tbl_Order>()
            .ID("gridContainer")
            .DataSource(Model)
            .AllowColumnReordering(true)
            .AllowColumnResizing(true)
            .ShowBorders(true)
            .Selection(s => s.Mode(SelectionMode.Single))
            .FilterRow(r => r.Visible(true))
            .GroupPanel(p => p.Visible(true))
            .StateStoring(s => s
                .Enabled(true)
                .Type(StateStoringType.LocalStorage)
                .StorageKey("storage")
            )
            .Pager(p => p
                .ShowPageSizeSelector(true)
                .AllowedPageSizes(new[] { 2, 4, 6, })
            )
            .Columns(columns =>
            {
                columns.AddFor(m => m.OrderNumber)
                    .Width(130);

                columns.AddFor(m => m.OrderDate)
                    .SortOrder(SortOrder.Desc);

                columns.AddFor(m => m.SaleAmount)
                    .Alignment(HorizontalAlignment.Right)
                    .Format(Format.Currency);

                columns.AddFor(m => m.Employee);

                columns.AddFor(m => m.CustomerStoreCity);

                columns.AddFor(m => m.CustomerStoreStat)
                    .GroupIndex(0);
            })
)



<style>

    #gridContainer {
        height: 440px;
        margin-top: 30px;
    }

    #descContainer a {
        color: #f05b41;
        text-decoration: underline;
        cursor: pointer;
    }

        #descContainer a:hover {
            text-decoration: none;
        }
</style>

<script>
    //Script for [Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See <URL> in console
    const eventListenerOptionsSupported = () => {
        let supported = false;

        try {
            const opts = Object.defineProperty({}, 'passive', {
                get() {
                    supported = true;
                }
            });

            window.addEventListener('test', null, opts);
            window.removeEventListener('test', null, opts);
        } catch (e) { }

        return supported;
    }

    const defaultOptions = {
        passive: false,
        capture: false
    };
    const supportedPassiveTypes = [
        'scroll', 'wheel',
        'touchstart', 'touchmove', 'touchenter', 'touchend', 'touchleave',
        'mouseout', 'mouseleave', 'mouseup', 'mousedown', 'mousemove', 'mouseenter', 'mousewheel', 'mouseover'
    ];
    const getDefaultPassiveOption = (passive, eventName) => {
        if (passive !== undefined) return passive;

        return supportedPassiveTypes.indexOf(eventName) === -1 ? false : defaultOptions.passive;
    };

    const getWritableOptions = (options) => {
        const passiveDescriptor = Object.getOwnPropertyDescriptor(options, 'passive');

        return passiveDescriptor && passiveDescriptor.writable !== true && passiveDescriptor.set === undefined
            ? Object.assign({}, options)
            : options;
    };

    const overwriteAddEvent = (superMethod) => {
        EventTarget.prototype.addEventListener = function (type, listener, options) {
            const usesListenerOptions = typeof options === 'object' && options !== null;
            const useCapture = usesListenerOptions ? options.capture : options;

            options = usesListenerOptions ? getWritableOptions(options) : {};
            options.passive = getDefaultPassiveOption(options.passive, type);
            options.capture = useCapture === undefined ? defaultOptions.capture : useCapture;

            superMethod.call(this, type, listener, options);
        };

        EventTarget.prototype.addEventListener._original = superMethod;
    };

    const supportsPassive = eventListenerOptionsSupported();

    if (supportsPassive) {
        const addEvent = EventTarget.prototype.addEventListener;
        overwriteAddEvent(addEvent);
    }
</script>